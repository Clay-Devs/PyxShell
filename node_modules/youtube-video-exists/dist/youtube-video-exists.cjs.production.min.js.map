{"version":3,"file":"youtube-video-exists.cjs.production.min.js","sources":["../src/videoInfo.ts"],"sourcesContent":["import { default as axios, AxiosResponse } from 'axios'\n\nexport interface VideoInfo {\n  /**\n   * Title of the video\n   */\n  title: string\n\n  /**\n   * Information about the author of the video\n   */\n  author: {\n    /**\n     * Name of the author of the video\n     */\n    name: string\n\n    /**\n     * URL to the channel of the author of the video\n     */\n    url: string\n  }\n}\n\nexport interface VideoInfoResponse {\n  /**\n   * True when the video exists otherwise false\n   */\n  existing: boolean\n\n  /**\n   * True when the video id format is valid otherwise false\n   */\n  validId: boolean\n\n  /**\n   * True when the video is private otherwise false or undefined\n   * Is defined when existing is true\n   */\n  private?: boolean\n\n  /**\n   * Information about the video\n   * Is defined when existing is true and private is false\n   */\n  info?: VideoInfo\n}\n\n/**\n * Source: https://webapps.stackexchange.com/a/101153\n */\nconst idRegex = new RegExp('^([0-9A-Za-z_-]{10}[048AEIMQUYcgkosw])$')\n\n/**\n * Checks if a YouTube video exists under the given ID\n *\n * When a video is found the return object also includes the title and author of the video\n *\n * @param id - YouTube video id\n * @returns {@link VideoInfoResponse} when {@link Promise} is resolved\n * @throws {@link AxiosError} when a network issue occurred\n */\nexport function getVideoInfo(id: string): Promise<VideoInfoResponse> {\n  let videoInfoResponse: VideoInfoResponse = {\n    existing: false,\n    validId: false,\n    private: undefined,\n    info: undefined,\n  }\n\n  if (idRegex.test(id)) {\n    videoInfoResponse.validId = true\n    return axios\n      .request({\n        url: 'oembed',\n        baseURL: 'https://www.youtube.com/',\n        params: {\n          url: `https://youtu.be/${id}`,\n          format: 'json',\n        },\n        validateStatus: (status: number) =>\n          status === 200 || status === 404 || status === 401,\n      })\n      .then((response: AxiosResponse) => {\n        if (response.status === 200) {\n          videoInfoResponse.existing = true\n          videoInfoResponse.private = false\n          videoInfoResponse.info = {\n            title: response.data.title,\n            author: {\n              name: response.data.author_name,\n              url: response.data.author_url,\n            },\n          }\n        } else if (response.status === 401) {\n          videoInfoResponse.existing = true\n          videoInfoResponse.private = true\n        }\n        return videoInfoResponse\n      })\n  } else return new Promise(resolve => resolve(videoInfoResponse))\n}\n"],"names":["idRegex","RegExp","id","videoInfoResponse","existing","validId","undefined","info","test","axios","request","url","baseURL","params","format","validateStatus","status","then","response","title","data","author","name","author_name","author_url","Promise","resolve"],"mappings":"gJAmDMA,EAAU,IAAIC,OAAO,yEAWEC,OACvBC,EAAuC,CACzCC,UAAU,EACVC,SAAS,eACAC,EACTC,UAAMD,UAGJN,EAAQQ,KAAKN,IACfC,EAAkBE,SAAU,EACrBI,EACJC,QAAQ,CACPC,IAAK,SACLC,QAAS,2BACTC,OAAQ,CACNF,wBAAyBT,EACzBY,OAAQ,QAEVC,eAAgB,SAACC,UACJ,MAAXA,GAA6B,MAAXA,GAA6B,MAAXA,KAEvCC,MAAK,SAACC,UACmB,MAApBA,EAASF,QACXb,EAAkBC,UAAW,EAC7BD,WAA4B,EAC5BA,EAAkBI,KAAO,CACvBY,MAAOD,EAASE,KAAKD,MACrBE,OAAQ,CACNC,KAAMJ,EAASE,KAAKG,YACpBZ,IAAKO,EAASE,KAAKI,cAGM,MAApBN,EAASF,SAClBb,EAAkBC,UAAW,EAC7BD,WAA4B,GAEvBA,MAEC,IAAIsB,SAAQ,SAAAC,UAAWA,EAAQvB"}